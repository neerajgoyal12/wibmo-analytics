// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import CoreData;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="WibmoAnalytics",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSNumber;
@class MerchantInfo;
@class CustomerInfo;

/// Analytics-Event struct to be used send data to analytics server, product-name and event-name are mandatory, event-transaction-id and date-time is auto generated, status and intermediate are false initially, all other attributes are optional
/// Attributes user can set are:
/// eventName
/// amount
/// currency
/// status
/// intermediate
/// extraKey1
/// extraKey2
/// extraKey3
/// extraKey4
/// extraKey5
/// extraKv
/// comments
/// merchantInfo
/// customerInfo
/// funnelId
/// funnelStepId
SWIFT_CLASS("_TtC14WibmoAnalytics14AnalyticsEvent")
@interface AnalyticsEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, copy) NSString * _Nullable panBin;
@property (nonatomic, copy) NSString * _Nullable panSha256;
@property (nonatomic, strong) NSNumber * _Nullable amount;
@property (nonatomic, copy) NSString * _Null_unspecified currency;
@property (nonatomic) BOOL status;
@property (nonatomic) BOOL intermediate;
@property (nonatomic, copy) NSString * _Null_unspecified extraKey1;
@property (nonatomic, copy) NSString * _Null_unspecified extraKey2;
@property (nonatomic, copy) NSString * _Null_unspecified extraKey3;
@property (nonatomic, copy) NSString * _Null_unspecified extraKey4;
@property (nonatomic, copy) NSString * _Null_unspecified extraKey5;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Null_unspecified extraKv;
@property (nonatomic, copy) NSString * _Null_unspecified comments;
@property (nonatomic, strong) MerchantInfo * _Nullable merchantInfo;
@property (nonatomic, strong) CustomerInfo * _Nullable customerInfo;
@property (nonatomic, copy) NSString * _Null_unspecified funnelId;
@property (nonatomic, strong) NSNumber * _Nullable funnelStepId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BuildEnv) {
  BuildEnvStaging = 0,
  BuildEnvProduction = 1,
};


/// CustomerInfo struct to capture customer information, Attributes avaialable are
/// customerId
/// customerName
/// customerEmail
/// customerMobile
SWIFT_CLASS("_TtC14WibmoAnalytics12CustomerInfo")
@interface CustomerInfo : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified customerId;
@property (nonatomic, copy) NSString * _Null_unspecified customerName;
@property (nonatomic, copy) NSString * _Null_unspecified customerEmail;
@property (nonatomic, copy) NSString * _Null_unspecified customerMobile;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(NSString * _Nullable)id name:(NSString * _Nullable)name email:(NSString * _Nullable)email mobile:(NSString * _Nullable)mobile OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'CustomerInfo.init(id:name:email:mobile:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


/// MerchanIfo struct to capture Merchant Info, Attributes availablea are,
/// merchantName
/// merchantId
/// merchantBankId
/// terminalId
/// mcc
/// merchantCity
/// merchantZipCode
/// merchantState
/// merchantCountry
SWIFT_CLASS("_TtC14WibmoAnalytics12MerchantInfo")
@interface MerchantInfo : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified merchantName;
@property (nonatomic, copy) NSString * _Null_unspecified merchantId;
@property (nonatomic, copy) NSString * _Null_unspecified merchantBankId;
@property (nonatomic, copy) NSString * _Null_unspecified terminalId;
@property (nonatomic, copy) NSString * _Null_unspecified mcc;
@property (nonatomic, copy) NSString * _Null_unspecified merchantCity;
@property (nonatomic, copy) NSString * _Null_unspecified merchantZipCode;
@property (nonatomic, copy) NSString * _Null_unspecified merchantState;
@property (nonatomic, copy) NSString * _Null_unspecified merchantCountry;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSManagedObjectContext (SWIFT_EXTENSION(WibmoAnalytics))
- (BOOL)saveContextAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_OBJC("Swift method 'NSManagedObjectContext.saveContext()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

@class NSEntityDescription;

SWIFT_CLASS_NAMED("WAEvent")
@interface WAEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSDate;

@interface WAEvent (SWIFT_EXTENSION(WibmoAnalytics))
@property (nonatomic, strong) NSData * _Nullable eventData;
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, strong) NSDate * _Nullable timeStamp;
@end


/// Public Interface class for WibmoAnalytics sdk, every project integrating with <code>WibmoAnalytics</code> sdk should first initialise this class by invoking
/// <code>WibmoAnalytics.setupAnalytics(productName:"",apiKey:"",apiUser:"", appVersion: 1)</code>
/// This class provides two public methods for creating and pushing events which should be accessed through
/// WibmoAnalytics.manager property.
/// New events can be created using
/// createNewEvent:
/// Events can be pushed by invoking
/// pushEvent:
SWIFT_CLASS("_TtC14WibmoAnalytics14WibmoAnalytics")
@interface WibmoAnalytics : NSObject
/// Property to access public methods of sdk
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WibmoAnalytics * _Nullable manager;)
+ (WibmoAnalytics * _Nullable)manager SWIFT_WARN_UNUSED_RESULT;
/// Invoke this method to initialise Analytics sdk before creating/pushing events
/// <em>Warning</em>
/// This method should be invoked only once with same product name else it will result in crash
/// Directly accessing public methods without first invoking this method will lead to inappropriate behaviour
/// \param productName productName against which the events should be logged on analytics server
///
/// \param apiKey apiKey
///
/// \param apiUser apiUser
///
/// \param appVersion appVersion
///
+ (void)setupAnalyticsWithProductName:(NSString * _Nullable)productName programName:(NSString * _Nullable)programName bankId:(NSString * _Nullable)bankId apiKey:(NSString * _Nullable)apiKey apiUser:(NSString * _Nullable)apiUser buildEnv:(enum BuildEnv)buildEnv;
- (BOOL)isProduction SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'WibmoAnalytics.isProduction()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Creates a new instance of AnalyticsEvent struct with productName, eventName and appInfo prepopulated
/// \param eventName Unique name identifiying the event
///
///
/// returns:
/// instance of AnalyticsEvent struct
- (AnalyticsEvent * _Nullable)createNewEventWithEventName:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
/// Stores the event into local-store, later pushes to analytics server
/// \param event event struct obtained from createNewEvent method, which has additional fields populated as required
///
- (void)pushEventWithEvent:(AnalyticsEvent * _Nullable)event;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
